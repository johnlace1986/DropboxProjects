//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50826.0
// 
namespace NisbetPhotography.MultipleImageUploader.NisbetPhotographyService {
    using System.Runtime.Serialization;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AlbumTypeEnum", Namespace="http://schemas.datacontract.org/2004/07/NisbetPhotography.Website.Business")]
    public enum AlbumTypeEnum : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Customer = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Portfolio = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Public = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="NisbetPhotographyService.INisbetPhotographyService")]
    public interface INisbetPhotographyService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/INisbetPhotographyService/GetAlbumTypeEnum", ReplyAction="http://tempuri.org/INisbetPhotographyService/GetAlbumTypeEnumResponse")]
        System.IAsyncResult BeginGetAlbumTypeEnum(int enumAsInt, System.AsyncCallback callback, object asyncState);
        
        NisbetPhotography.MultipleImageUploader.NisbetPhotographyService.AlbumTypeEnum EndGetAlbumTypeEnum(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/INisbetPhotographyService/UploadImageToCustomerAlbum", ReplyAction="http://tempuri.org/INisbetPhotographyService/UploadImageToCustomerAlbumResponse")]
        System.IAsyncResult BeginUploadImageToCustomerAlbum(System.Guid customerId, short albumId, byte[] image, System.AsyncCallback callback, object asyncState);
        
        void EndUploadImageToCustomerAlbum(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/INisbetPhotographyService/UploadImageToPortfolio", ReplyAction="http://tempuri.org/INisbetPhotographyService/UploadImageToPortfolioResponse")]
        System.IAsyncResult BeginUploadImageToPortfolio(short portfolioCategoryId, byte[] image, System.AsyncCallback callback, object asyncState);
        
        void EndUploadImageToPortfolio(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/INisbetPhotographyService/UploadImageToPublicAlbum", ReplyAction="http://tempuri.org/INisbetPhotographyService/UploadImageToPublicAlbumResponse")]
        System.IAsyncResult BeginUploadImageToPublicAlbum(short publicAlbumId, byte[] image, System.AsyncCallback callback, object asyncState);
        
        void EndUploadImageToPublicAlbum(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface INisbetPhotographyServiceChannel : NisbetPhotography.MultipleImageUploader.NisbetPhotographyService.INisbetPhotographyService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAlbumTypeEnumCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAlbumTypeEnumCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public NisbetPhotography.MultipleImageUploader.NisbetPhotographyService.AlbumTypeEnum Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((NisbetPhotography.MultipleImageUploader.NisbetPhotographyService.AlbumTypeEnum)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class NisbetPhotographyServiceClient : System.ServiceModel.ClientBase<NisbetPhotography.MultipleImageUploader.NisbetPhotographyService.INisbetPhotographyService>, NisbetPhotography.MultipleImageUploader.NisbetPhotographyService.INisbetPhotographyService {
        
        private BeginOperationDelegate onBeginGetAlbumTypeEnumDelegate;
        
        private EndOperationDelegate onEndGetAlbumTypeEnumDelegate;
        
        private System.Threading.SendOrPostCallback onGetAlbumTypeEnumCompletedDelegate;
        
        private BeginOperationDelegate onBeginUploadImageToCustomerAlbumDelegate;
        
        private EndOperationDelegate onEndUploadImageToCustomerAlbumDelegate;
        
        private System.Threading.SendOrPostCallback onUploadImageToCustomerAlbumCompletedDelegate;
        
        private BeginOperationDelegate onBeginUploadImageToPortfolioDelegate;
        
        private EndOperationDelegate onEndUploadImageToPortfolioDelegate;
        
        private System.Threading.SendOrPostCallback onUploadImageToPortfolioCompletedDelegate;
        
        private BeginOperationDelegate onBeginUploadImageToPublicAlbumDelegate;
        
        private EndOperationDelegate onEndUploadImageToPublicAlbumDelegate;
        
        private System.Threading.SendOrPostCallback onUploadImageToPublicAlbumCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public NisbetPhotographyServiceClient() {
        }
        
        public NisbetPhotographyServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public NisbetPhotographyServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NisbetPhotographyServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NisbetPhotographyServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetAlbumTypeEnumCompletedEventArgs> GetAlbumTypeEnumCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UploadImageToCustomerAlbumCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UploadImageToPortfolioCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UploadImageToPublicAlbumCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult NisbetPhotography.MultipleImageUploader.NisbetPhotographyService.INisbetPhotographyService.BeginGetAlbumTypeEnum(int enumAsInt, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAlbumTypeEnum(enumAsInt, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        NisbetPhotography.MultipleImageUploader.NisbetPhotographyService.AlbumTypeEnum NisbetPhotography.MultipleImageUploader.NisbetPhotographyService.INisbetPhotographyService.EndGetAlbumTypeEnum(System.IAsyncResult result) {
            return base.Channel.EndGetAlbumTypeEnum(result);
        }
        
        private System.IAsyncResult OnBeginGetAlbumTypeEnum(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int enumAsInt = ((int)(inValues[0]));
            return ((NisbetPhotography.MultipleImageUploader.NisbetPhotographyService.INisbetPhotographyService)(this)).BeginGetAlbumTypeEnum(enumAsInt, callback, asyncState);
        }
        
        private object[] OnEndGetAlbumTypeEnum(System.IAsyncResult result) {
            NisbetPhotography.MultipleImageUploader.NisbetPhotographyService.AlbumTypeEnum retVal = ((NisbetPhotography.MultipleImageUploader.NisbetPhotographyService.INisbetPhotographyService)(this)).EndGetAlbumTypeEnum(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAlbumTypeEnumCompleted(object state) {
            if ((this.GetAlbumTypeEnumCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAlbumTypeEnumCompleted(this, new GetAlbumTypeEnumCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAlbumTypeEnumAsync(int enumAsInt) {
            this.GetAlbumTypeEnumAsync(enumAsInt, null);
        }
        
        public void GetAlbumTypeEnumAsync(int enumAsInt, object userState) {
            if ((this.onBeginGetAlbumTypeEnumDelegate == null)) {
                this.onBeginGetAlbumTypeEnumDelegate = new BeginOperationDelegate(this.OnBeginGetAlbumTypeEnum);
            }
            if ((this.onEndGetAlbumTypeEnumDelegate == null)) {
                this.onEndGetAlbumTypeEnumDelegate = new EndOperationDelegate(this.OnEndGetAlbumTypeEnum);
            }
            if ((this.onGetAlbumTypeEnumCompletedDelegate == null)) {
                this.onGetAlbumTypeEnumCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAlbumTypeEnumCompleted);
            }
            base.InvokeAsync(this.onBeginGetAlbumTypeEnumDelegate, new object[] {
                        enumAsInt}, this.onEndGetAlbumTypeEnumDelegate, this.onGetAlbumTypeEnumCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult NisbetPhotography.MultipleImageUploader.NisbetPhotographyService.INisbetPhotographyService.BeginUploadImageToCustomerAlbum(System.Guid customerId, short albumId, byte[] image, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUploadImageToCustomerAlbum(customerId, albumId, image, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void NisbetPhotography.MultipleImageUploader.NisbetPhotographyService.INisbetPhotographyService.EndUploadImageToCustomerAlbum(System.IAsyncResult result) {
            base.Channel.EndUploadImageToCustomerAlbum(result);
        }
        
        private System.IAsyncResult OnBeginUploadImageToCustomerAlbum(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid customerId = ((System.Guid)(inValues[0]));
            short albumId = ((short)(inValues[1]));
            byte[] image = ((byte[])(inValues[2]));
            return ((NisbetPhotography.MultipleImageUploader.NisbetPhotographyService.INisbetPhotographyService)(this)).BeginUploadImageToCustomerAlbum(customerId, albumId, image, callback, asyncState);
        }
        
        private object[] OnEndUploadImageToCustomerAlbum(System.IAsyncResult result) {
            ((NisbetPhotography.MultipleImageUploader.NisbetPhotographyService.INisbetPhotographyService)(this)).EndUploadImageToCustomerAlbum(result);
            return null;
        }
        
        private void OnUploadImageToCustomerAlbumCompleted(object state) {
            if ((this.UploadImageToCustomerAlbumCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UploadImageToCustomerAlbumCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UploadImageToCustomerAlbumAsync(System.Guid customerId, short albumId, byte[] image) {
            this.UploadImageToCustomerAlbumAsync(customerId, albumId, image, null);
        }
        
        public void UploadImageToCustomerAlbumAsync(System.Guid customerId, short albumId, byte[] image, object userState) {
            if ((this.onBeginUploadImageToCustomerAlbumDelegate == null)) {
                this.onBeginUploadImageToCustomerAlbumDelegate = new BeginOperationDelegate(this.OnBeginUploadImageToCustomerAlbum);
            }
            if ((this.onEndUploadImageToCustomerAlbumDelegate == null)) {
                this.onEndUploadImageToCustomerAlbumDelegate = new EndOperationDelegate(this.OnEndUploadImageToCustomerAlbum);
            }
            if ((this.onUploadImageToCustomerAlbumCompletedDelegate == null)) {
                this.onUploadImageToCustomerAlbumCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUploadImageToCustomerAlbumCompleted);
            }
            base.InvokeAsync(this.onBeginUploadImageToCustomerAlbumDelegate, new object[] {
                        customerId,
                        albumId,
                        image}, this.onEndUploadImageToCustomerAlbumDelegate, this.onUploadImageToCustomerAlbumCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult NisbetPhotography.MultipleImageUploader.NisbetPhotographyService.INisbetPhotographyService.BeginUploadImageToPortfolio(short portfolioCategoryId, byte[] image, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUploadImageToPortfolio(portfolioCategoryId, image, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void NisbetPhotography.MultipleImageUploader.NisbetPhotographyService.INisbetPhotographyService.EndUploadImageToPortfolio(System.IAsyncResult result) {
            base.Channel.EndUploadImageToPortfolio(result);
        }
        
        private System.IAsyncResult OnBeginUploadImageToPortfolio(object[] inValues, System.AsyncCallback callback, object asyncState) {
            short portfolioCategoryId = ((short)(inValues[0]));
            byte[] image = ((byte[])(inValues[1]));
            return ((NisbetPhotography.MultipleImageUploader.NisbetPhotographyService.INisbetPhotographyService)(this)).BeginUploadImageToPortfolio(portfolioCategoryId, image, callback, asyncState);
        }
        
        private object[] OnEndUploadImageToPortfolio(System.IAsyncResult result) {
            ((NisbetPhotography.MultipleImageUploader.NisbetPhotographyService.INisbetPhotographyService)(this)).EndUploadImageToPortfolio(result);
            return null;
        }
        
        private void OnUploadImageToPortfolioCompleted(object state) {
            if ((this.UploadImageToPortfolioCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UploadImageToPortfolioCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UploadImageToPortfolioAsync(short portfolioCategoryId, byte[] image) {
            this.UploadImageToPortfolioAsync(portfolioCategoryId, image, null);
        }
        
        public void UploadImageToPortfolioAsync(short portfolioCategoryId, byte[] image, object userState) {
            if ((this.onBeginUploadImageToPortfolioDelegate == null)) {
                this.onBeginUploadImageToPortfolioDelegate = new BeginOperationDelegate(this.OnBeginUploadImageToPortfolio);
            }
            if ((this.onEndUploadImageToPortfolioDelegate == null)) {
                this.onEndUploadImageToPortfolioDelegate = new EndOperationDelegate(this.OnEndUploadImageToPortfolio);
            }
            if ((this.onUploadImageToPortfolioCompletedDelegate == null)) {
                this.onUploadImageToPortfolioCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUploadImageToPortfolioCompleted);
            }
            base.InvokeAsync(this.onBeginUploadImageToPortfolioDelegate, new object[] {
                        portfolioCategoryId,
                        image}, this.onEndUploadImageToPortfolioDelegate, this.onUploadImageToPortfolioCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult NisbetPhotography.MultipleImageUploader.NisbetPhotographyService.INisbetPhotographyService.BeginUploadImageToPublicAlbum(short publicAlbumId, byte[] image, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUploadImageToPublicAlbum(publicAlbumId, image, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void NisbetPhotography.MultipleImageUploader.NisbetPhotographyService.INisbetPhotographyService.EndUploadImageToPublicAlbum(System.IAsyncResult result) {
            base.Channel.EndUploadImageToPublicAlbum(result);
        }
        
        private System.IAsyncResult OnBeginUploadImageToPublicAlbum(object[] inValues, System.AsyncCallback callback, object asyncState) {
            short publicAlbumId = ((short)(inValues[0]));
            byte[] image = ((byte[])(inValues[1]));
            return ((NisbetPhotography.MultipleImageUploader.NisbetPhotographyService.INisbetPhotographyService)(this)).BeginUploadImageToPublicAlbum(publicAlbumId, image, callback, asyncState);
        }
        
        private object[] OnEndUploadImageToPublicAlbum(System.IAsyncResult result) {
            ((NisbetPhotography.MultipleImageUploader.NisbetPhotographyService.INisbetPhotographyService)(this)).EndUploadImageToPublicAlbum(result);
            return null;
        }
        
        private void OnUploadImageToPublicAlbumCompleted(object state) {
            if ((this.UploadImageToPublicAlbumCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UploadImageToPublicAlbumCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UploadImageToPublicAlbumAsync(short publicAlbumId, byte[] image) {
            this.UploadImageToPublicAlbumAsync(publicAlbumId, image, null);
        }
        
        public void UploadImageToPublicAlbumAsync(short publicAlbumId, byte[] image, object userState) {
            if ((this.onBeginUploadImageToPublicAlbumDelegate == null)) {
                this.onBeginUploadImageToPublicAlbumDelegate = new BeginOperationDelegate(this.OnBeginUploadImageToPublicAlbum);
            }
            if ((this.onEndUploadImageToPublicAlbumDelegate == null)) {
                this.onEndUploadImageToPublicAlbumDelegate = new EndOperationDelegate(this.OnEndUploadImageToPublicAlbum);
            }
            if ((this.onUploadImageToPublicAlbumCompletedDelegate == null)) {
                this.onUploadImageToPublicAlbumCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUploadImageToPublicAlbumCompleted);
            }
            base.InvokeAsync(this.onBeginUploadImageToPublicAlbumDelegate, new object[] {
                        publicAlbumId,
                        image}, this.onEndUploadImageToPublicAlbumDelegate, this.onUploadImageToPublicAlbumCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override NisbetPhotography.MultipleImageUploader.NisbetPhotographyService.INisbetPhotographyService CreateChannel() {
            return new NisbetPhotographyServiceClientChannel(this);
        }
        
        private class NisbetPhotographyServiceClientChannel : ChannelBase<NisbetPhotography.MultipleImageUploader.NisbetPhotographyService.INisbetPhotographyService>, NisbetPhotography.MultipleImageUploader.NisbetPhotographyService.INisbetPhotographyService {
            
            public NisbetPhotographyServiceClientChannel(System.ServiceModel.ClientBase<NisbetPhotography.MultipleImageUploader.NisbetPhotographyService.INisbetPhotographyService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetAlbumTypeEnum(int enumAsInt, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = enumAsInt;
                System.IAsyncResult _result = base.BeginInvoke("GetAlbumTypeEnum", _args, callback, asyncState);
                return _result;
            }
            
            public NisbetPhotography.MultipleImageUploader.NisbetPhotographyService.AlbumTypeEnum EndGetAlbumTypeEnum(System.IAsyncResult result) {
                object[] _args = new object[0];
                NisbetPhotography.MultipleImageUploader.NisbetPhotographyService.AlbumTypeEnum _result = ((NisbetPhotography.MultipleImageUploader.NisbetPhotographyService.AlbumTypeEnum)(base.EndInvoke("GetAlbumTypeEnum", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUploadImageToCustomerAlbum(System.Guid customerId, short albumId, byte[] image, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = customerId;
                _args[1] = albumId;
                _args[2] = image;
                System.IAsyncResult _result = base.BeginInvoke("UploadImageToCustomerAlbum", _args, callback, asyncState);
                return _result;
            }
            
            public void EndUploadImageToCustomerAlbum(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("UploadImageToCustomerAlbum", _args, result);
            }
            
            public System.IAsyncResult BeginUploadImageToPortfolio(short portfolioCategoryId, byte[] image, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = portfolioCategoryId;
                _args[1] = image;
                System.IAsyncResult _result = base.BeginInvoke("UploadImageToPortfolio", _args, callback, asyncState);
                return _result;
            }
            
            public void EndUploadImageToPortfolio(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("UploadImageToPortfolio", _args, result);
            }
            
            public System.IAsyncResult BeginUploadImageToPublicAlbum(short publicAlbumId, byte[] image, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = publicAlbumId;
                _args[1] = image;
                System.IAsyncResult _result = base.BeginInvoke("UploadImageToPublicAlbum", _args, callback, asyncState);
                return _result;
            }
            
            public void EndUploadImageToPublicAlbum(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("UploadImageToPublicAlbum", _args, result);
            }
        }
    }
}
