using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Data;

namespace NisbetPhotography.DbObjects.Data
{
    internal static class CustomerAlbum
    {
        /// <summary>
        /// Creates a new Business.CustomerAlbum object from the data in the DataTableReader
        /// </summary>
        /// <param name="dtr">DataTableReader containing the CustomerAlbum's data</param>
        /// <returns>Business.CustomerAlbum object</returns>
        private static Business.CustomerAlbum GetCustomerAlbumFromDataTableReader(DataTableReader dtr)
        {
            Business.CustomerAlbum customerAlbum = new Business.CustomerAlbum();
            customerAlbum.Id = (Int16)dtr["Id"];
            customerAlbum.customerId = (Guid)dtr["CustomerId"];
            customerAlbum.Name = (String)dtr["Name"];
            customerAlbum.Description = (String)dtr["Description"];
            customerAlbum.Images = GetCustomerImagesByCustomerAlbumId(customerAlbum.Id, customerAlbum.customerId);
            customerAlbum.DateCreated = (DateTime)dtr["DateCreated"];
            customerAlbum.IsInDatabase = true;

            return customerAlbum;
        }

        /// <summary>
        /// Loads a specific album from the database
        /// </summary>
        /// <param name="customerAlbumId">Unique identifier of the album being loaded</param>
        /// <param name="customerId">Unique identifier of the customer the album belongs to</param>
        /// <returns>Business.CustomerAlbum object</returns>
        public static Business.CustomerAlbum GetCustomerAlbumById(Int16 customerAlbumId, Guid customerId)
        {
            List<StoredProcedureParameter> parameters = new List<StoredProcedureParameter>();
            parameters.Add(Control.GetParameter("CustomerAlbumId", DbType.Int16, customerAlbumId));
            parameters.Add(Control.GetParameter("CustomerId", DbType.Guid, customerId));

            using (DataTableReader dtr = Control.ExecuteReader("GetCustomerAlbumById", parameters.ToArray()))
            {
                if (dtr.Read())
                    return GetCustomerAlbumFromDataTableReader(dtr);
                else
                    throw new Exception.SpecifiedDbObjectNotFoundException("No album exists in the database with the specified Id number \"" + customerAlbumId.ToString() + "\" and specified customer Id \"" + customerId.ToString() + "\"");
            }
        }

        /// <summary>
        /// Loads all albums that belong to a specified customer
        /// </summary>
        /// <param name="customer">Customer the albums belong to</param>
        /// <returns>All albums that belong to a specified customer</returns>
        public static Business.CustomerAlbum[] GetCustomerAlbumsByCustomer(Business.User customer)
        {
            Business.CustomerAlbum[] customerAlbums = GetCustomerAlbumsByCustomerId(customer.UserId);

            foreach (Business.CustomerAlbum customerAlbum in customerAlbums)
                customerAlbum.customer = customer;

            return customerAlbums;
        }

        /// <summary>
        /// Loads all albums that belong to a specified customer
        /// </summary>
        /// <param name="customerId">Unique identifier of the customer the album belongs to</param>
        /// <returns>All albums that belong to a specified customer</returns>
        public static Business.CustomerAlbum[] GetCustomerAlbumsByCustomerId(Guid customerId)
        {
            List<Business.CustomerAlbum> customerAlbums = new List<Business.CustomerAlbum>();

            using (DataTableReader dtr = Control.ExecuteReader("GetCustomerAlbumsByCustomerId", Control.GetParameter("CustomerId", DbType.Guid, customerId)))
            {
                while (dtr.Read())
                    customerAlbums.Add(GetCustomerAlbumFromDataTableReader(dtr));
            }

            return customerAlbums.ToArray();
        }

        /// <summary>
        /// Adds the album's details to the database
        /// </summary>
        /// <param name="customerAlbum">CustomerAlbum object being added to the database</param>
        /// <returns>New unique identifier for the CustomerAlbum, generated by the database</returns>
        public static Int16 AddCustomerAlbum(Business.CustomerAlbum customerAlbum)
        {
            try
            {
                return (Int16)Control.ExecuteScalar("AddCustomerAlbum", customerAlbum.GetParametersForStoredProcedure(false));
            }
            catch (System.Exception e)
            {
                throw new Exception.AddDbObjectException("Could not add customer album", e);
            }
        }

        /// <summary>
        /// Updates the album's details in the database
        /// </summary>
        /// <param name="customerAlbum">CustomerAlbum object being updated in the database</param>
        public static void UpdateCustomerAlbum(Business.CustomerAlbum customerAlbum)
        {
            try
            {
                Control.ExecuteNonQuery("UpdateCustomerAlbum", customerAlbum.GetParametersForStoredProcedure(true));
            }
            catch (System.Exception e)
            {
                throw new Exception.UpdateDbObjectException("Could not update customer album", e);
            }
        }

        /// <summary>
        /// Deletes the specified album from the database
        /// </summary>
        /// <param name="customerAlbumId">Unique identifier of the album being deleted</param>
        /// <param name="customerId">Unique identifier of the customer the album belongs to</param>
        public static void DeleteCustomerAlbum(Int16 customerAlbumId, Guid customerId)
        {
            try
            {
                List<StoredProcedureParameter> parameters = new List<StoredProcedureParameter>();
                parameters.Add(Control.GetParameter("CustomerAlbumId", DbType.Int16, customerAlbumId));
                parameters.Add(Control.GetParameter("CustomerId", DbType.Guid, customerId));

                Control.ExecuteNonQuery("DeleteCustomerAlbum", parameters.ToArray());
            }
            catch (System.Exception e)
            {
                throw new Exception.DeleteDbObjectException("Could not delete customer album", e);
            }
        }

        /// <summary>
        /// Loads all image that belong to a specified customer album
        /// </summary>
        /// <param name="customerAlbumId">Unique identifier of the album</param>
        /// <param name="customerId">Unique identifier of the customer the album belongs to</param>
        /// <returns>All image that belong to a specified customer album</returns>
        public static Business.CustomerImage[] GetCustomerImagesByCustomerAlbumId(Int16 customerAlbumId, Guid customerId)
        {
            List<StoredProcedureParameter> parameters = new List<StoredProcedureParameter>();
            parameters.Add(Control.GetParameter("CustomerAlbumId", DbType.Int16, customerAlbumId));
            parameters.Add(Control.GetParameter("CustomerId", DbType.Guid, customerId));

            List<Business.CustomerImage> albums = new List<Business.CustomerImage>();

            using (DataTableReader dtr = Control.ExecuteReader("GetCustomerImagesByCustomerAlbumId", parameters.ToArray()))
            {
                while (dtr.Read())
                    albums.Add(new Business.CustomerImage()
                    {
                        Id = (Int16)dtr["Id"],
                        ImageUrl = (String)dtr["ImageUrl"],
                        Thumbnail = (Boolean)dtr["Thumbnail"]
                    });
            }

            return albums.ToArray();
        }

        /// <summary>
        /// Adds an image to the specified album
        /// </summary>
        /// <param name="customerAlbumId">Unique identifier of the parent album the image is being added to</param>
        /// <param name="customerId">Unique identifier of the customer who owns the album</param>
        /// <param name="imageUrl">URL of the image being added</param>
        /// <param name="thumbnail">Determines whether the image will act as the thumbail for the album</param>
        /// <returns>New unique identifier of the image, generated by the database</returns>
        public static Int16 AddImageToCustomerAlbum(Int16 customerAlbumId, Guid customerId, String imageUrl, Boolean thumbnail)
        {
            try
            {
                List<StoredProcedureParameter> parameters = new List<StoredProcedureParameter>();
                parameters.Add(Control.GetParameter("CustomerAlbumId", DbType.Int16, customerAlbumId));
                parameters.Add(Control.GetParameter("CustomerId", DbType.Guid, customerId));
                parameters.Add(Control.GetParameter("ImageUrl", DbType.String, imageUrl));
                parameters.Add(Control.GetParameter("Thumbnail", DbType.Boolean, thumbnail));

                return (Int16)Control.ExecuteScalar("AddImageToCustomerAlbum", parameters.ToArray());
            }
            catch (System.Exception e)
            {
                throw new Exception.AddDbObjectException("Could not add image to album", e);
            }
        }

        /// <summary>
        /// Removes an image from the specified album
        /// </summary>
        /// <param name="customerImageId">Unique identifier of image being removed</param>
        /// <param name="customerAlbumId">Unique identifier of album image is being removed from</param>
        /// <param name="customerId">Unique identifier of the customer who owns the album</param>
        public static void RemoveImageFromCustomerAlbum(Int16 customerImageId, Int16 customerAlbumId, Guid customerId)
        {
            try
            {
                List<StoredProcedureParameter> parameters = new List<StoredProcedureParameter>();
                parameters.Add(Control.GetParameter("CustomerImageId", DbType.Int16, customerImageId));
                parameters.Add(Control.GetParameter("CustomerAlbumId", DbType.Int16, customerAlbumId));
                parameters.Add(Control.GetParameter("CustomerId", DbType.Guid, customerId));

                Control.ExecuteNonQuery("RemoveImageFromCustomerAlbum", parameters.ToArray());
            }
            catch (System.Exception e)
            {
                throw new Exception.RemoveChildFromParentException("Could not remove image from album", e);
            }
        }

        /// <summary>
        /// Sets the thumbnail image for the specified album to the specified image
        /// </summary>
        /// <param name="customerImageId">Unique identifier of image being set as the thumbnail</param>
        /// <param name="customerAlbumId">Unique identifier of album image belongs to</param>
        /// <param name="customerId">Unique identifier of the customer who owns the album</param>
        public static void SetCustomerAlbumThumbnailImage(Int16 customerImageId, Int16 customerAlbumId, Guid customerId)
        {
            try
            {
                List<StoredProcedureParameter> parameters = new List<StoredProcedureParameter>();
                parameters.Add(Control.GetParameter("CustomerImageId", DbType.Int16, customerImageId));
                parameters.Add(Control.GetParameter("CustomerAlbumId", DbType.Int16, customerAlbumId));
                parameters.Add(Control.GetParameter("CustomerId", DbType.Guid, customerId));

                Control.ExecuteNonQuery("SetCustomerAlbumThumbnailImage", parameters.ToArray());
            }
            catch (System.Exception e)
            {
                throw new Exception.SetThumbnailImageException("Could not set album thumbnail image", e);
            }
        }
    }
}
