using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Data;

namespace NisbetPhotography.DbObjects.Data
{
    internal static class Error
    {
        /// <summary>
        /// Creates a new Business.Error object from the data in the DataTableReader
        /// </summary>
        /// <param name="dtr">DataTableReader containing the Error's data</param>
        /// <returns>Business.Error object</returns>
        private static Business.Error GetErrorFromDataTableReader(DataTableReader dtr)
        {
            Business.Error error = new Business.Error();
            error.Id = (Int16)dtr["Id"];
            error.Name = (String)dtr["Name"];
            error.Message = (String)dtr["Message"];
            error.StrackTrace = (String)dtr["StackTrace"];
            error.outerErrorId = (Int16)dtr["OuterErrorId"];
            error.innerErrorId = (Int16)dtr["InnerErrorId"];
            error.DateThrown = (DateTime)dtr["DateThrown"];
            error.IsInDatabase = true;

            return error;
        }

        /// <summary>
        /// Returns all top-level errors in the database
        /// </summary>
        /// <returns>Array containing all top-level errors in the database</returns>
        public static Business.Error[] GetErrors()
        {
            List<Business.Error> errors = new List<Business.Error>();

            using (DataTableReader dtr = Control.ExecuteReader("GetErrors"))
            {
                while (dtr.Read())
                    errors.Add(GetErrorFromDataTableReader(dtr));
            }

            return errors.ToArray();
        }

        /// <summary>
        /// Loads a specific error from the database
        /// </summary>
        /// <param name="errorId">Unique identifier of the error being loaded</param>
        /// <returns>Business.Error object</returns>
        public static Business.Error GetErrorById(Int16 errorId)
        {
            using (DataTableReader dtr = Control.ExecuteReader("GetErrorById", Control.GetParameter("ErrorId", DbType.Int16, errorId)))
            {
                if (dtr.Read())
                    return GetErrorFromDataTableReader(dtr);
                else
                    throw new Exception.SpecifiedDbObjectNotFoundException("No error exists in the database with the Id number \"" + errorId.ToString() + "\"");
            }
        }

        /// <summary>
        /// Adds a new error to the database
        /// </summary>
        /// <param name="error">Error being added</param>
        /// <returns>New unique identifier for the error, generated by the database</returns>
        public static Int16 AddError(Business.Error error)
        {
            try
            {
                return (Int16)Control.ExecuteScalar("AddError", error.GetParametersForStoredProcedure(false));
            }
            catch (System.Exception e)
            {
                throw new Exception.AddDbObjectException("Could not add error", e);
            }
        }

        /// <summary>
        /// Deletes an error from the database
        /// </summary>
        /// <param name="errorId">Unique identifier of error being deleted</param>
        public static void DeleteError(Int16 errorId)
        {
            try
            {
                Control.ExecuteNonQuery("DeleteError", Control.GetParameter("ErrorId", DbType.Int16, errorId));
            }
            catch (System.Exception e)
            {
                throw new Exception.DeleteDbObjectException("Could not delete error", e);
            }
        }

        /// <summary>
        /// Adds an inner error to the specified error
        /// </summary>
        /// <param name="outerErrorId">Unique identifier of outer error</param>
        /// <param name="innerErrorId">Unique identifier of inner error</param>
        public static void AddInnerError(Int16 outerErrorId, Int16 innerErrorId)
        {
            try
            {
                List<StoredProcedureParameter> parameters = new List<StoredProcedureParameter>();
                parameters.Add(Control.GetParameter("OuterErrorId", DbType.Int16, outerErrorId));
                parameters.Add(Control.GetParameter("InnerErrorId", DbType.Int16, innerErrorId));

                Control.ExecuteNonQuery("AddInnerError", parameters.ToArray());
            }
            catch (System.Exception e)
            {
                throw new Exception.AddChildToParentException("Could not add inner exception", e);
            }
        }
    }
}
