using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Data;

namespace NisbetPhotography.DbObjects.Data
{
    internal static class PortfolioCategory
    {
        /// <summary>
        /// Creates a new Business.PortfolioCategory object from the data in the DataTableReader
        /// </summary>
        /// <param name="dtr">DataTableReader containing the PortfolioCategory's data</param>
        /// <returns>Business.PortfolioCategory object</returns>
        private static Business.PortfolioCategory GetPortfolioCategoryFromDataTableReader(DataTableReader dtr)
        {
            Business.PortfolioCategory portfolioCategory = new Business.PortfolioCategory();
            portfolioCategory.Id = (Int16)dtr["Id"];
            portfolioCategory.Name = (String)dtr["Name"];
            portfolioCategory.Images = GetPortfolioImagesByParentId(portfolioCategory.Id);
            portfolioCategory.IsInDatabase = true;

            return portfolioCategory;
        }

        /// <summary>
        /// Returns all categories in the database
        /// </summary>
        /// <returns>Array containing all categories in the database</returns>
        public static Business.PortfolioCategory[] GetPortfolioCategories()
        {
            List<Business.PortfolioCategory> portfolioCategories = new List<Business.PortfolioCategory>();

            using (DataTableReader dtr = Control.ExecuteReader("GetPortfolioCategories"))
            {
                while (dtr.Read())
                {
                    portfolioCategories.Add(GetPortfolioCategoryFromDataTableReader(dtr));
                }
            }

            return portfolioCategories.ToArray();
        }

        /// <summary>
        /// Loads a specific category from the database
        /// </summary>
        /// <param name="portfolioCategoryId">Unique identifier of the category being loaded</param>
        /// <returns>Business.PortfolioCategory object</returns>
        public static Business.PortfolioCategory GetPortfolioCategoryById(Int16 portfolioCategoryId)
        {
            using (DataTableReader dtr = Control.ExecuteReader("GetPortfolioCategoryById", new StoredProcedureParameter[] { Control.GetParameter("PortfolioCategoryId", DbType.Int16, portfolioCategoryId) }))
            {
                if (dtr.Read())
                    return GetPortfolioCategoryFromDataTableReader(dtr);
                else
                    throw new Exception.SpecifiedDbObjectNotFoundException("No category exists in the database with the Id number \"" + portfolioCategoryId.ToString() + "\"");
            }
        }

        /// <summary>
        /// Adds the category's details to the database
        /// </summary>
        /// <param name="portfolioCategory">PortfolioCategory object being added to the database</param>
        /// <returns>New unique identifier for the PortfolioCategory, generated by the database</returns>
        public static Int16 AddPortfolioCategory(Business.PortfolioCategory portfolioCategory)
        {
            try
            {
                return (Int16)Control.ExecuteScalar("AddPortfolioCategory", portfolioCategory.GetParametersForStoredProcedure(false));
            }
            catch (System.Exception e)
            {
                throw new Exception.AddDbObjectException("Could not add category to database", e);
            }
        }

        /// <summary>
        /// Updates the category's details in the database
        /// </summary>
        /// <param name="portfolioCategory">PortfolioCategory object being updated in the database</param>
        public static void UpdatePortfolioCategory(Business.PortfolioCategory portfolioCategory)
        {
            try
            {
                Control.ExecuteNonQuery("UpdatePortfolioCategory", portfolioCategory.GetParametersForStoredProcedure(true));
            }
            catch (System.Exception e)
            {
                throw new Exception.UpdateDbObjectException("Could not update category in the database", e);
            }
        }

        /// <summary>
        /// Deletes the specified category from the database
        /// </summary>
        /// <param name="portfolioCategoryId">Unique identifier of the category being deleted</param>
        public static void DeletePortfolioCategory(Int16 portfolioCategoryId)
        {
            try
            {
                Control.ExecuteNonQuery("DeletePortfolioCategory", Control.GetParameter("PortfolioCategoryId", DbType.Int16, portfolioCategoryId));
            }
            catch (System.Exception e)
            {
                throw new Exception.DeleteDbObjectException("Could not delete category", e);
            }
        }

        /// <summary>
        /// Determines whether there is currently category in the database with the specified name
        /// </summary>
        /// <param name="name">Name to search for</param>
        /// <returns>True if a category currently exists with the specified name, false if not</returns>
        public static Boolean PortfolioCategoryNameExists(String name)
        {
            return (Boolean)Control.ExecuteScalar("PortfolioCategoryNameExists", Control.GetParameter("Name", DbType.String, name));
        }

        /// <summary>
        /// Returns all images that belong to the specified category
        /// </summary>
        /// <param name="parentId">Unique identifier of the parent category</param>
        /// <returns>Array containing all images that belong to the specified category</returns>
        public static Business.PortfolioImage[] GetPortfolioImagesByParentId(Int16 parentId)
        {
            List<Business.PortfolioImage> portfolioImages = new List<Business.PortfolioImage>();

            using (DataTableReader dtr = Control.ExecuteReader("GetPortfolioImagesByParentId", Control.GetParameter("ParentId", DbType.Int16, parentId)))
            {
                while (dtr.Read())
                    portfolioImages.Add(new Business.PortfolioImage() { Id = (Int16)dtr["Id"], ImageUrl = (String)dtr["ImageUrl"], Thumbnail = (Boolean)dtr["Thumbnail"] });
            }

            return portfolioImages.ToArray();
        }

        /// <summary>
        /// Adds an image to the specified category
        /// </summary>
        /// <param name="parentId">Unique identifier of the parent category the image is being added to</param>
        /// <param name="imageUrl">URL of the image being added</param>
        /// <param name="thumbnail">Determines whether the image will act as the thumbail for the category</param>
        /// <returns>New unique identifier of the image, generated by the database</returns>
        public static Int16 AddImageToPortfolioCategory(Int16 parentId, String imageUrl, Boolean thumbnail)
        {
            try
            {
                List<StoredProcedureParameter> parameters = new List<StoredProcedureParameter>();
                parameters.Add(Control.GetParameter("ParentId", DbType.Int16, parentId));
                parameters.Add(Control.GetParameter("ImageUrl", DbType.String, imageUrl));
                parameters.Add(Control.GetParameter("Thumbnail", DbType.Boolean, thumbnail));

                return (Int16)Control.ExecuteScalar("AddImageToPortfolioCategory", parameters.ToArray());
            }
            catch (System.Exception e)
            {
                throw new Exception.AddDbObjectException("Could not add image to category", e);
            }
        }

        /// <summary>
        /// Removes an image from the specified category
        /// </summary>
        /// <param name="portfolioImageId">Unique identifier of image being removed</param>
        /// <param name="parentId">Unique identifier of category image is being removed from</param>
        public static void RemoveImageFromPortfolioCategory(Int16 parentId, Int16 portfolioImageId)
        {
            try
            {
                List<StoredProcedureParameter> parameters = new List<StoredProcedureParameter>();
                parameters.Add(Control.GetParameter("PortfolioImageId", DbType.Int16, portfolioImageId));
                parameters.Add(Control.GetParameter("ParentId", DbType.Int16, parentId));

                Control.ExecuteNonQuery("RemoveImageFromPortfolioCategory", parameters.ToArray());
            }
            catch (System.Exception e)
            {
                throw new Exception.RemoveChildFromParentException("Could not remove image from category", e);
            }
        }

        /// <summary>
        /// Sets the thumbnail image for the specified category to the specified image
        /// </summary>
        /// <param name="parentId">Unique identifier of the category the thumbnail is being set for</param>
        /// <param name="portfolioImageId">Unique identifier of the image to be set at the thumbnail image for the category</param>
        public static void SetPortfolioCategoryThumbnailImage(Int16 parentId, Int16 portfolioImageId)
        {
            try
            {
                List<StoredProcedureParameter> parameters = new List<StoredProcedureParameter>();
                parameters.Add(Control.GetParameter("PortfolioImageId", DbType.Int16, portfolioImageId));
                parameters.Add(Control.GetParameter("ParentId", DbType.Int16, parentId));

                Control.ExecuteNonQuery("SetPortfolioCategoryThumbnailImage", parameters.ToArray());
            }
            catch (System.Exception e)
            {
                throw new Exception.SetThumbnailImageException("Could not set category thumbnail image", e);
            }
        }
    }
}
